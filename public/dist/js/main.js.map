{"version":3,"sources":["main.js"],"names":["express","require","request","cors","querystring","cookieParser","client_id","client_secret","redirect_uri","generateRandomString","length","text","possible","i","charAt","Math","floor","random","stateKey","app","use","static","__dirname","get","req","res","state","cookie","scope","redirect","stringify","response_type","code","query","storedState","cookies","error","clearCookie","authOptions","url","form","grant_type","headers","Authorization","Buffer","toString","json","post","response","body","statusCode","access_token","refresh_token","options","console","log","send","listen"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB,C,CAAkC;;;AAClC,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAArB,C,CAAkC;;;AAClC,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIK,SAAS,GAAG,kCAAhB,C,CAAoD;;AACpD,IAAIC,aAAa,GAAG,kCAApB,C,CAAwD;;AACxD,IAAIC,YAAY,GAAG,gCAAnB,C,CAAqD;;AAErD;AACA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAUC,MAAV,EAAkB;AAC5C,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,QAAQ,GACX,gEADD;;AAGA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAChCF,IAAAA,IAAI,IAAIC,QAAQ,CAACE,MAAT,CAAgBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,QAAQ,CAACF,MAApC,CAAhB,CAAR;AACA;;AACD,SAAOC,IAAP;AACA,CATD;;AAWA,IAAIO,QAAQ,GAAG,oBAAf;AAEA,IAAIC,GAAG,GAAGnB,OAAO,EAAjB;AAEAmB,GAAG,CAACC,GAAJ,CAAQpB,OAAO,CAACqB,MAAR,CAAeC,SAAS,GAAG,SAA3B,CAAR,EACEF,GADF,CACMjB,IAAI,EADV,EAEEiB,GAFF,CAEMf,YAAY,EAFlB;AAIAc,GAAG,CAACI,GAAJ,CAAQ,QAAR,EAAkB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACrC,MAAIC,KAAK,GAAGjB,oBAAoB,CAAC,EAAD,CAAhC;AACAgB,EAAAA,GAAG,CAACE,MAAJ,CAAWT,QAAX,EAAqBQ,KAArB,EAFqC,CAIrC;;AACA,MAAIE,KAAK,GACR,2EADD;AAEAH,EAAAA,GAAG,CAACI,QAAJ,CACC,4CACCzB,WAAW,CAAC0B,SAAZ,CAAsB;AACrBC,IAAAA,aAAa,EAAE,MADM;AAErBzB,IAAAA,SAAS,EAAEA,SAFU;AAGrBsB,IAAAA,KAAK,EAAEA,KAHc;AAIrBpB,IAAAA,YAAY,EAAEA,YAJO;AAKrBkB,IAAAA,KAAK,EAAEA;AALc,GAAtB,CAFF;AAUA,CAjBD;AAmBAP,GAAG,CAACI,GAAJ,CAAQ,WAAR,EAAqB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACxC;AACA;AAEA,MAAIO,IAAI,GAAGR,GAAG,CAACS,KAAJ,CAAUD,IAAV,IAAkB,IAA7B;AACA,MAAIN,KAAK,GAAGF,GAAG,CAACS,KAAJ,CAAUP,KAAV,IAAmB,IAA/B;AACA,MAAIQ,WAAW,GAAGV,GAAG,CAACW,OAAJ,GAAcX,GAAG,CAACW,OAAJ,CAAYjB,QAAZ,CAAd,GAAsC,IAAxD;;AAEA,MAAIQ,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKQ,WAAhC,EAA6C;AAC5CT,IAAAA,GAAG,CAACI,QAAJ,CACC,OACCzB,WAAW,CAAC0B,SAAZ,CAAsB;AACrBM,MAAAA,KAAK,EAAE;AADc,KAAtB,CAFF;AAMA,GAPD,MAOO;AACNX,IAAAA,GAAG,CAACY,WAAJ,CAAgBnB,QAAhB;AACA,QAAIoB,WAAW,GAAG;AACjBC,MAAAA,GAAG,EAAE,wCADY;AAEjBC,MAAAA,IAAI,EAAE;AACLR,QAAAA,IAAI,EAAEA,IADD;AAELxB,QAAAA,YAAY,EAAEA,YAFT;AAGLiC,QAAAA,UAAU,EAAE;AAHP,OAFW;AAOjBC,MAAAA,OAAO,EAAE;AACRC,QAAAA,aAAa,EACZ,WACA,IAAIC,MAAJ,CAAWtC,SAAS,GAAG,GAAZ,GAAkBC,aAA7B,EAA4CsC,QAA5C,CACC,QADD;AAHO,OAPQ;AAcjBC,MAAAA,IAAI,EAAE;AAdW,KAAlB;AAiBA5C,IAAAA,OAAO,CAAC6C,IAAR,CAAaT,WAAb,EAA0B,UAAUF,KAAV,EAAiBY,QAAjB,EAA2BC,IAA3B,EAAiC;AAC1D,UAAI,CAACb,KAAD,IAAUY,QAAQ,CAACE,UAAT,KAAwB,GAAtC,EAA2C;AAC1C,YAAIC,YAAY,GAAGF,IAAI,CAACE,YAAxB;AAAA,YACCC,aAAa,GAAGH,IAAI,CAACG,aADtB;AAGA,YAAIC,OAAO,GAAG;AACbd,UAAAA,GAAG,EAAE,+BADQ;AAEbG,UAAAA,OAAO,EAAE;AAAEC,YAAAA,aAAa,EAAE,YAAYQ;AAA7B,WAFI;AAGbL,UAAAA,IAAI,EAAE;AAHO,SAAd,CAJ0C,CAU1C;;AACA5C,QAAAA,OAAO,CAACqB,GAAR,CAAY8B,OAAZ,EAAqB,UAAUjB,KAAV,EAAiBY,QAAjB,EAA2BC,IAA3B,EAAiC;AACrDK,UAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,SAFD,EAX0C,CAe1C;;AACAxB,QAAAA,GAAG,CAACI,QAAJ,CACC,OACCzB,WAAW,CAAC0B,SAAZ,CAAsB;AACrBqB,UAAAA,YAAY,EAAEA,YADO;AAErBC,UAAAA,aAAa,EAAEA;AAFM,SAAtB,CAFF;AAOA,OAvBD,MAuBO;AACN3B,QAAAA,GAAG,CAACI,QAAJ,CACC,OACCzB,WAAW,CAAC0B,SAAZ,CAAsB;AACrBM,UAAAA,KAAK,EAAE;AADc,SAAtB,CAFF;AAMA;AACD,KAhCD;AAiCA;AACD,CApED;AAsEAjB,GAAG,CAACI,GAAJ,CAAQ,gBAAR,EAA0B,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC7C;AACA,MAAI2B,aAAa,GAAG5B,GAAG,CAACS,KAAJ,CAAUmB,aAA9B;AACA,MAAId,WAAW,GAAG;AACjBC,IAAAA,GAAG,EAAE,wCADY;AAEjBG,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EACZ,WACA,IAAIC,MAAJ,CAAWtC,SAAS,GAAG,GAAZ,GAAkBC,aAA7B,EAA4CsC,QAA5C,CAAqD,QAArD;AAHO,KAFQ;AAOjBL,IAAAA,IAAI,EAAE;AACLC,MAAAA,UAAU,EAAE,eADP;AAELW,MAAAA,aAAa,EAAEA;AAFV,KAPW;AAWjBN,IAAAA,IAAI,EAAE;AAXW,GAAlB;AAcA5C,EAAAA,OAAO,CAAC6C,IAAR,CAAaT,WAAb,EAA0B,UAAUF,KAAV,EAAiBY,QAAjB,EAA2BC,IAA3B,EAAiC;AAC1D,QAAI,CAACb,KAAD,IAAUY,QAAQ,CAACE,UAAT,KAAwB,GAAtC,EAA2C;AAC1C,UAAIC,YAAY,GAAGF,IAAI,CAACE,YAAxB;AACA1B,MAAAA,GAAG,CAAC+B,IAAJ,CAAS;AACRL,QAAAA,YAAY,EAAEA;AADN,OAAT;AAGA;AACD,GAPD;AAQA,CAzBD;AA2BAG,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACApC,GAAG,CAACsC,MAAJ,CAAW,IAAX","sourcesContent":["/**\n * This is an example of a basic node.js script that performs\n * the Authorization Code oAuth2 flow to authenticate against\n * the Spotify Accounts.\n *\n * For more information, read\n * https://developer.spotify.com/web-api/authorization-guide/#authorization_code_flow\n */\n\nvar express = require('express'); // Express web server framework\nvar request = require('request'); // \"Request\" library\nvar cors = require('cors');\nvar querystring = require('querystring');\nvar cookieParser = require('cookie-parser');\n\nvar client_id = '3aa853aad7c94d128e9288f0fa7a2b4c'; // Your client id\nvar client_secret = '3fa07c1d5c194c438936f5f4bd9b9228'; // Your secret\nvar redirect_uri = 'http://localhost:8888/callback'; // Your redirect uri\n\n/**\n * Generates a random string containing numbers and letters\n * @param  {number} length The length of the string\n * @return {string} The generated string\n */\nvar generateRandomString = function (length) {\n\tvar text = '';\n\tvar possible =\n\t\t'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n\tfor (var i = 0; i < length; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\treturn text;\n};\n\nvar stateKey = 'spotify_auth_state';\n\nvar app = express();\n\napp.use(express.static(__dirname + '/public'))\n\t.use(cors())\n\t.use(cookieParser());\n\napp.get('/login', function (req, res) {\n\tvar state = generateRandomString(16);\n\tres.cookie(stateKey, state);\n\n\t// your application requests authorization\n\tvar scope =\n\t\t'user-read-private user-read-email user-top-read user-read-recently-played';\n\tres.redirect(\n\t\t'https://accounts.spotify.com/authorize?' +\n\t\t\tquerystring.stringify({\n\t\t\t\tresponse_type: 'code',\n\t\t\t\tclient_id: client_id,\n\t\t\t\tscope: scope,\n\t\t\t\tredirect_uri: redirect_uri,\n\t\t\t\tstate: state,\n\t\t\t})\n\t);\n});\n\napp.get('/callback', function (req, res) {\n\t// your application requests refresh and access tokens\n\t// after checking the state parameter\n\n\tvar code = req.query.code || null;\n\tvar state = req.query.state || null;\n\tvar storedState = req.cookies ? req.cookies[stateKey] : null;\n\n\tif (state === null || state !== storedState) {\n\t\tres.redirect(\n\t\t\t'/#' +\n\t\t\t\tquerystring.stringify({\n\t\t\t\t\terror: 'state_mismatch',\n\t\t\t\t})\n\t\t);\n\t} else {\n\t\tres.clearCookie(stateKey);\n\t\tvar authOptions = {\n\t\t\turl: 'https://accounts.spotify.com/api/token',\n\t\t\tform: {\n\t\t\t\tcode: code,\n\t\t\t\tredirect_uri: redirect_uri,\n\t\t\t\tgrant_type: 'authorization_code',\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\tAuthorization:\n\t\t\t\t\t'Basic ' +\n\t\t\t\t\tnew Buffer(client_id + ':' + client_secret).toString(\n\t\t\t\t\t\t'base64'\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tjson: true,\n\t\t};\n\n\t\trequest.post(authOptions, function (error, response, body) {\n\t\t\tif (!error && response.statusCode === 200) {\n\t\t\t\tvar access_token = body.access_token,\n\t\t\t\t\trefresh_token = body.refresh_token;\n\n\t\t\t\tvar options = {\n\t\t\t\t\turl: 'https://api.spotify.com/v1/me',\n\t\t\t\t\theaders: { Authorization: 'Bearer ' + access_token },\n\t\t\t\t\tjson: true,\n\t\t\t\t};\n\n\t\t\t\t// use the access token to access the Spotify Web API\n\t\t\t\trequest.get(options, function (error, response, body) {\n\t\t\t\t\tconsole.log(body);\n\t\t\t\t});\n\n\t\t\t\t// we can also pass the token to the browser to make requests from there\n\t\t\t\tres.redirect(\n\t\t\t\t\t'/#' +\n\t\t\t\t\t\tquerystring.stringify({\n\t\t\t\t\t\t\taccess_token: access_token,\n\t\t\t\t\t\t\trefresh_token: refresh_token,\n\t\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tres.redirect(\n\t\t\t\t\t'/#' +\n\t\t\t\t\t\tquerystring.stringify({\n\t\t\t\t\t\t\terror: 'invalid_token',\n\t\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n});\n\napp.get('/refresh_token', function (req, res) {\n\t// requesting access token from refresh token\n\tvar refresh_token = req.query.refresh_token;\n\tvar authOptions = {\n\t\turl: 'https://accounts.spotify.com/api/token',\n\t\theaders: {\n\t\t\tAuthorization:\n\t\t\t\t'Basic ' +\n\t\t\t\tnew Buffer(client_id + ':' + client_secret).toString('base64'),\n\t\t},\n\t\tform: {\n\t\t\tgrant_type: 'refresh_token',\n\t\t\trefresh_token: refresh_token,\n\t\t},\n\t\tjson: true,\n\t};\n\n\trequest.post(authOptions, function (error, response, body) {\n\t\tif (!error && response.statusCode === 200) {\n\t\t\tvar access_token = body.access_token;\n\t\t\tres.send({\n\t\t\t\taccess_token: access_token,\n\t\t\t});\n\t\t}\n\t});\n});\n\nconsole.log('Listening on 8888');\napp.listen(8888);\n"],"file":"main.js"}