{"version":3,"sources":["app.js"],"names":["express","require","request","cors","querystring","cookieParser","client_id","client_secret","redirect_uri","generateRandomString","length","text","possible","i","charAt","Math","floor","random","stateKey","app","use","static","__dirname","get","req","res","state","cookie","scope","redirect","stringify","response_type","code","query","storedState","cookies","error","clearCookie","authOptions","url","form","grant_type","headers","Buffer","toString","json","post","response","body","statusCode","access_token","refresh_token","options","console","log","send","listen"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB,C,CAAkC;;;AAClC,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAArB,C,CAAkC;;;AAClC,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIK,SAAS,GAAG,kCAAhB,C,CAAoD;;AACpD,IAAIC,aAAa,GAAG,kCAApB,C,CAAwD;;AACxD,IAAIC,YAAY,GAAG,gCAAnB,C,CAAqD;;AAErD;AACA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAASC,MAAT,EAAiB;AAC1C,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,QAAQ,GAAG,gEAAf;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC/BF,IAAAA,IAAI,IAAIC,QAAQ,CAACE,MAAT,CAAgBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,QAAQ,CAACF,MAApC,CAAhB,CAAR;AACD;;AACD,SAAOC,IAAP;AACD,CARD;;AAUA,IAAIO,QAAQ,GAAG,oBAAf;AAEA,IAAIC,GAAG,GAAGnB,OAAO,EAAjB;AAEAmB,GAAG,CAACC,GAAJ,CAAQpB,OAAO,CAACqB,MAAR,CAAeC,SAAS,GAAG,SAA3B,CAAR,EACIF,GADJ,CACQjB,IAAI,EADZ,EAEIiB,GAFJ,CAEQf,YAAY,EAFpB;AAIAc,GAAG,CAACI,GAAJ,CAAQ,QAAR,EAAkB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAEnC,MAAIC,KAAK,GAAGjB,oBAAoB,CAAC,EAAD,CAAhC;AACAgB,EAAAA,GAAG,CAACE,MAAJ,CAAWT,QAAX,EAAqBQ,KAArB,EAHmC,CAKnC;;AACA,MAAIE,KAAK,GAAG,2EAAZ;AACAH,EAAAA,GAAG,CAACI,QAAJ,CAAa,4CACXzB,WAAW,CAAC0B,SAAZ,CAAsB;AACpBC,IAAAA,aAAa,EAAE,MADK;AAEpBzB,IAAAA,SAAS,EAAEA,SAFS;AAGpBsB,IAAAA,KAAK,EAAEA,KAHa;AAIpBpB,IAAAA,YAAY,EAAEA,YAJM;AAKpBkB,IAAAA,KAAK,EAAEA;AALa,GAAtB,CADF;AAQD,CAfD;AAiBAP,GAAG,CAACI,GAAJ,CAAQ,WAAR,EAAqB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAEtC;AACA;AAEA,MAAIO,IAAI,GAAGR,GAAG,CAACS,KAAJ,CAAUD,IAAV,IAAkB,IAA7B;AACA,MAAIN,KAAK,GAAGF,GAAG,CAACS,KAAJ,CAAUP,KAAV,IAAmB,IAA/B;AACA,MAAIQ,WAAW,GAAGV,GAAG,CAACW,OAAJ,GAAcX,GAAG,CAACW,OAAJ,CAAYjB,QAAZ,CAAd,GAAsC,IAAxD;;AAEA,MAAIQ,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKQ,WAAhC,EAA6C;AAC3CT,IAAAA,GAAG,CAACI,QAAJ,CAAa,OACXzB,WAAW,CAAC0B,SAAZ,CAAsB;AACpBM,MAAAA,KAAK,EAAE;AADa,KAAtB,CADF;AAID,GALD,MAKO;AACLX,IAAAA,GAAG,CAACY,WAAJ,CAAgBnB,QAAhB;AACA,QAAIoB,WAAW,GAAG;AAChBC,MAAAA,GAAG,EAAE,wCADW;AAEhBC,MAAAA,IAAI,EAAE;AACJR,QAAAA,IAAI,EAAEA,IADF;AAEJxB,QAAAA,YAAY,EAAEA,YAFV;AAGJiC,QAAAA,UAAU,EAAE;AAHR,OAFU;AAOhBC,MAAAA,OAAO,EAAE;AACP,yBAAiB,WAAY,IAAIC,MAAJ,CAAWrC,SAAS,GAAG,GAAZ,GAAkBC,aAA7B,EAA4CqC,QAA5C,CAAqD,QAArD;AADtB,OAPO;AAUhBC,MAAAA,IAAI,EAAE;AAVU,KAAlB;AAaA3C,IAAAA,OAAO,CAAC4C,IAAR,CAAaR,WAAb,EAA0B,UAASF,KAAT,EAAgBW,QAAhB,EAA0BC,IAA1B,EAAgC;AACxD,UAAI,CAACZ,KAAD,IAAUW,QAAQ,CAACE,UAAT,KAAwB,GAAtC,EAA2C;AAEzC,YAAIC,YAAY,GAAGF,IAAI,CAACE,YAAxB;AAAA,YACIC,aAAa,GAAGH,IAAI,CAACG,aADzB;AAGA,YAAIC,OAAO,GAAG;AACZb,UAAAA,GAAG,EAAE,+BADO;AAEZG,UAAAA,OAAO,EAAE;AAAE,6BAAiB,YAAYQ;AAA/B,WAFG;AAGZL,UAAAA,IAAI,EAAE;AAHM,SAAd,CALyC,CAWzC;;AACA3C,QAAAA,OAAO,CAACqB,GAAR,CAAY6B,OAAZ,EAAqB,UAAShB,KAAT,EAAgBW,QAAhB,EAA0BC,IAA1B,EAAgC;AACnDK,UAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACD,SAFD,EAZyC,CAgBzC;;AACAvB,QAAAA,GAAG,CAACI,QAAJ,CAAa,OACXzB,WAAW,CAAC0B,SAAZ,CAAsB;AACpBoB,UAAAA,YAAY,EAAEA,YADM;AAEpBC,UAAAA,aAAa,EAAEA;AAFK,SAAtB,CADF;AAKD,OAtBD,MAsBO;AACL1B,QAAAA,GAAG,CAACI,QAAJ,CAAa,OACXzB,WAAW,CAAC0B,SAAZ,CAAsB;AACpBM,UAAAA,KAAK,EAAE;AADa,SAAtB,CADF;AAID;AACF,KA7BD;AA8BD;AACF,CA5DD;AA8DAjB,GAAG,CAACI,GAAJ,CAAQ,gBAAR,EAA0B,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAE3C;AACA,MAAI0B,aAAa,GAAG3B,GAAG,CAACS,KAAJ,CAAUkB,aAA9B;AACA,MAAIb,WAAW,GAAG;AAChBC,IAAAA,GAAG,EAAE,wCADW;AAEhBG,IAAAA,OAAO,EAAE;AAAE,uBAAiB,WAAY,IAAIC,MAAJ,CAAWrC,SAAS,GAAG,GAAZ,GAAkBC,aAA7B,EAA4CqC,QAA5C,CAAqD,QAArD;AAA/B,KAFO;AAGhBJ,IAAAA,IAAI,EAAE;AACJC,MAAAA,UAAU,EAAE,eADR;AAEJU,MAAAA,aAAa,EAAEA;AAFX,KAHU;AAOhBN,IAAAA,IAAI,EAAE;AAPU,GAAlB;AAUA3C,EAAAA,OAAO,CAAC4C,IAAR,CAAaR,WAAb,EAA0B,UAASF,KAAT,EAAgBW,QAAhB,EAA0BC,IAA1B,EAAgC;AACxD,QAAI,CAACZ,KAAD,IAAUW,QAAQ,CAACE,UAAT,KAAwB,GAAtC,EAA2C;AACzC,UAAIC,YAAY,GAAGF,IAAI,CAACE,YAAxB;AACAzB,MAAAA,GAAG,CAAC8B,IAAJ,CAAS;AACP,wBAAgBL;AADT,OAAT;AAGD;AACF,GAPD;AAQD,CAtBD;AAwBAG,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAnC,GAAG,CAACqC,MAAJ,CAAW,IAAX","sourcesContent":["/**\n * This is an example of a basic node.js script that performs\n * the Authorization Code oAuth2 flow to authenticate against\n * the Spotify Accounts.\n *\n * For more information, read\n * https://developer.spotify.com/web-api/authorization-guide/#authorization_code_flow\n */\n\nvar express = require('express'); // Express web server framework\nvar request = require('request'); // \"Request\" library\nvar cors = require('cors');\nvar querystring = require('querystring');\nvar cookieParser = require('cookie-parser');\n\nvar client_id = '3aa853aad7c94d128e9288f0fa7a2b4c'; // Your client id\nvar client_secret = '3fa07c1d5c194c438936f5f4bd9b9228'; // Your secret\nvar redirect_uri = 'http://localhost:8888/callback'; // Your redirect uri\n\n/**\n * Generates a random string containing numbers and letters\n * @param  {number} length The length of the string\n * @return {string} The generated string\n */\nvar generateRandomString = function(length) {\n  var text = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n};\n\nvar stateKey = 'spotify_auth_state';\n\nvar app = express();\n\napp.use(express.static(__dirname + '/public'))\n   .use(cors())\n   .use(cookieParser());\n\napp.get('/login', function(req, res) {\n\n  var state = generateRandomString(16);\n  res.cookie(stateKey, state);\n\n  // your application requests authorization\n  var scope = 'user-read-private user-read-email user-top-read user-read-recently-played';\n  res.redirect('https://accounts.spotify.com/authorize?' +\n    querystring.stringify({\n      response_type: 'code',\n      client_id: client_id,\n      scope: scope,\n      redirect_uri: redirect_uri,\n      state: state\n    }));\n});\n\napp.get('/callback', function(req, res) {\n\n  // your application requests refresh and access tokens\n  // after checking the state parameter\n\n  var code = req.query.code || null;\n  var state = req.query.state || null;\n  var storedState = req.cookies ? req.cookies[stateKey] : null;\n\n  if (state === null || state !== storedState) {\n    res.redirect('/#' +\n      querystring.stringify({\n        error: 'state_mismatch'\n      }));\n  } else {\n    res.clearCookie(stateKey);\n    var authOptions = {\n      url: 'https://accounts.spotify.com/api/token',\n      form: {\n        code: code,\n        redirect_uri: redirect_uri,\n        grant_type: 'authorization_code'\n      },\n      headers: {\n        'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n      },\n      json: true\n    };\n\n    request.post(authOptions, function(error, response, body) {\n      if (!error && response.statusCode === 200) {\n\n        var access_token = body.access_token,\n            refresh_token = body.refresh_token;\n\n        var options = {\n          url: 'https://api.spotify.com/v1/me',\n          headers: { 'Authorization': 'Bearer ' + access_token },\n          json: true\n        };\n\n        // use the access token to access the Spotify Web API\n        request.get(options, function(error, response, body) {\n          console.log(body);\n        });\n\n        // we can also pass the token to the browser to make requests from there\n        res.redirect('/#' +\n          querystring.stringify({\n            access_token: access_token,\n            refresh_token: refresh_token\n          }));\n      } else {\n        res.redirect('/#' +\n          querystring.stringify({\n            error: 'invalid_token'\n          }));\n      }\n    });\n  }\n});\n\napp.get('/refresh_token', function(req, res) {\n\n  // requesting access token from refresh token\n  var refresh_token = req.query.refresh_token;\n  var authOptions = {\n    url: 'https://accounts.spotify.com/api/token',\n    headers: { 'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64')) },\n    form: {\n      grant_type: 'refresh_token',\n      refresh_token: refresh_token\n    },\n    json: true\n  };\n\n  request.post(authOptions, function(error, response, body) {\n    if (!error && response.statusCode === 200) {\n      var access_token = body.access_token;\n      res.send({\n        'access_token': access_token\n      });\n    }\n  });\n});\n\nconsole.log('Listening on 8888');\napp.listen(8888);\n"],"file":"app.js"}